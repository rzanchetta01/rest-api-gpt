package repository

import (
	"context"
	"errors"
	"fmt"
	"os"
	"os/exec"
	"project-p-back/internal/entity"
	"strings"

	"github.com/spf13/viper"
	"go.mongodb.org/mongo-driver/mongo"
)

type craiyonRepository struct {
	scriptPath string
	terminal   string
	db         *mongo.Collection
}

type ICraiyonRepository interface {
	ExecCraiyonScript(string, string, string) (*entity.Craiyon, error)
}

func NewCraiyonRepository(client *mongo.Client) *craiyonRepository {
	repo := craiyonRepository{}
	repo.scriptPath = viper.GetString("Ia.Craiyon.ScriptPath")
	repo.terminal = viper.GetString("Ia.Craiyon.Terminal")

	collectionName := viper.GetString("MongoDb.Database.Collections.CraiyonCollection")
	databaseName := viper.GetString("MongoDb.Database.Name")
	repo.db = client.Database(databaseName).Collection(collectionName)

	return &repo
}

func (repo *craiyonRepository) ExecCraiyonScript(prompt string, userId string, style string) (*entity.Craiyon, error) {

	var iStyle int8
	switch strings.ToUpper(style) {
	case "ART":
		iStyle = 1
	case "DRAWING":
		iStyle = 2
	case "PHOTO":
		iStyle = 3
	case "NONE":
		iStyle = 4
	default:
		iStyle = 1
	}

	strCommand := fmt.Sprintf("PROMPT=\"%s\" STYLE=\"%d\" python %s", prompt, iStyle, repo.scriptPath)
	cmd := exec.Command(repo.terminal, "-c", strCommand)
	dir, err := os.Getwd()
	if err != nil {
		return nil, err
	}

	cmd.Dir = dir

	output, err := cmd.CombinedOutput()
	if err != nil {
		return nil, errors.New(string(output) + " " + err.Error())
	}

	strOtp := string(output)

	strOtp = strings.TrimPrefix(strOtp, "['")
	strOtp = strings.TrimSuffix(strOtp, "\r\n")
	strOtp = strings.TrimSuffix(strOtp, "']")
	urls := strings.Split(strOtp, "', '")

	var urlArray []string

	urlArray = append(urlArray, urls...)

	entity := entity.Craiyon{
		Images:          urlArray,
		UserId:          userId,
		TemplateMessage: "Images generated by craiyon.com",
		Style:           style,
	}

	_, err = repo.db.InsertOne(context.Background(), entity)
	if err != nil {
		return nil, err
	}

	return &entity, nil

}
